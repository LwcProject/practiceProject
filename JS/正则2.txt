1. ***String正则API
2. ***RegExp对象

1. ***String正则API
   1. 查找：4种：
     1. 固定关键词(不支持正则)，只能找位置：
	var i=str.indexOf/lastIndexOf("敏感词"[,fromi])
     2. 支持正则，只能判断有没有:
        var i=str.search(/正则表达式/)
     3. 支持正则，获得所有匹配的敏感词内容，无法获得每个位置
        var arr=str.match(/正则表达式/g)
     4. 支持正则，即可获得每个敏感词内容，又可获得位置:
        var arr=reg.exec(str);
   2. 替换：
        var newStr=str.replace(/正则表达式/g,"替换内容");
      删除：将匹配内容替换为""
	比如：去掉字符串开头和结尾的空字符
      格式化：2步：
        1. 先定义正则表达式，用()分组
           每个()，都会得到一个序号:$1,$2,...
        2. 在replace中的替换内容部分，使用$n拼接结果
           匹配时，会自动将$n换成本次匹配的实际内容
        比如: var birth="19831226";
              birth=birth.replace(
	            /(\d{4})(\d{2})(\d{2})/,"$1年$2月$3日");
   3. 切割：
       var arr=str.split(/分隔符正则表达式/);

2. ***RegExp对象：正则表达式对象
    封装了一个正则表达式，提供了操作正则表达式的方法
    
    创建正则表达式：2种：
     1. 创建固定正则表达式对象：
         var reg=/正则表达式/g;
         何时使用：如果正则表达式不需要动态生成时
     2. 创建可变正则表达式对象：
         var reg=new RegExp("正则表达式","后缀");
   	 何时使用：如果正则表达式由变量或字符串动态生成时
         强调：所有\都要写成\\。比如："\d{6}"-->"\\{6}"

        后缀：g: global 全局/全部
              i: 忽略大小写 

    正则表达式对象的方法：2个：
      1. 查找的第四种方法：即可找每个敏感词内容，又可获得位置
	var arr=reg.exec(str);
	每次只能找下*一个*敏感词，自动调整下次开始的位置！
        如果找到返回一个数组对象：
	   数组的第一个元素保存本次找到的敏感词内容
           数组的index属性保存本次找到的敏感词的位置
        如果没找到，返回null！

         RegExp.$n : 仅获得本次匹配中的$n部分
    








